import {
	type EnkoreJSRuntimeProjectAPIContext,
	createEntity,
	importAPI
} from "@anio-software/enkore-private.spec"
import type {NodePackageJSON} from "@anio-software/enkore-private.spec/primitives"
import {createNodeAPIOptions} from "@anio-software/enkore-private.spec/factory"
import {
	getProjectRootFromArgumentAndValidate,
	readEnkoreConfigFile,
	resolveImportSpecifierFromProjectRoot
} from "@anio-software/enkore-private.spec/utils"
import {_getCreationOptionsForEmbed} from "#~embeds/projectAPI/_getCreationOptionsForEmbed.ts"
import {createTemporaryResourceFromStringSyncFactory} from "@anio-software/pkg.temporary-resource-factory"
import {readFileJSON, scandir} from "@anio-software/pkg.node-fs"
import path from "node:path"
import fs from "node:fs/promises"
import {createRequire} from "node:module"

type EmbedMap = NonNullable<EnkoreJSRuntimeProjectAPIContext["_projectEmbedFileMapRemoveMeInBundle"]>
type Embed = EmbedMap extends Map<unknown, infer V> ? V : never

async function readFileBase64(path: string): Promise<string> {
	const contents = await fs.readFile(path)

	return contents.toString("base64")
}

const createTemporaryResourceFromStringSync = createTemporaryResourceFromStringSyncFactory(
	createRequire("/")
)

async function generateEmbedFileMap(
	projectRoot: string
): Promise<EmbedMap> {
	const embedMap: EmbedMap = new Map()
	const entries = await scandir(path.join(projectRoot, "objects", "embeds"), {
		allowMissingDir: true,
		filter(entry) {
			return entry.type === "file:regular"
		}
	})

	const baseEmbeds = entries.filter(e => {
		return e.name.endsWith(".enkoreRawEmbedFile")
	}).map(e => {
		const newBaseName = e.name.slice(0, -(".enkoreRawEmbedFile".length))

		return {
			origin: path.join(
				path.dirname(e.absolutePath),
				newBaseName
			),
			filePath: path.join(
				path.dirname(e.relativePath),
				newBaseName
			)
		}
	})

	for (const embed of baseEmbeds) {
		embedMap.set(`text://${embed.filePath}`, await defineEmbed(
			"text", `${embed.origin}.enkoreRawEmbedFile`
		))

		if (embed.filePath.endsWith(".ts")) {
			embedMap.set(`js-bundle://${embed.filePath}`, await defineEmbed(
				"js-bundle", `${embed.origin}.enkoreJsBundleFile`
			))

			// generated by compilation process
			embedMap.set(`dts://${embed.filePath}`, await defineEmbed(
				"dts", `${embed.origin.slice(0, -3)}.d.ts`
			))

			// generated by compilation process
			embedMap.set(`js://${embed.filePath}`, await defineEmbed(
				"js", `${embed.origin.slice(0, -3)}.js`
			))
		}

		async function defineEmbed(protocol: string, sourceFile: string): Promise<Embed> {
			const data = await readFileBase64(sourceFile)
			const url = `${protocol}://${embed.filePath}`

			return {
				data,
				sourceFilePath: embed.filePath,
				url,
				_resourceURL: createTemporaryResourceFromStringSync(
					data, _getCreationOptionsForEmbed(url)
				).resourceURL
			}
		}
	}

	return embedMap
}

export async function generateProjectAPIContext(
	userProjectRoot: string | ["inferFromCLIArgs"],
	refreshObjectFiles: boolean
): Promise<EnkoreJSRuntimeProjectAPIContext> {
	const projectRoot = await getProjectRootFromArgumentAndValidate(
		userProjectRoot
	)

	const projectConfig = await readEnkoreConfigFile(projectRoot)
	const projectPackageJSON = await readFileJSON(
		path.join(projectRoot, "package.json")
	) as NodePackageJSON

	//
	// if this API was called from node at runtime we need to make sure
	// objects/embeds is up-to-date. We achieve this by running a partial build
	//
	if (refreshObjectFiles) {
		const enkorePath = resolveImportSpecifierFromProjectRoot(
			projectRoot, "@anio-software/enkore"
		)

		if (!enkorePath) {
			throw new Error(`Unable to resolve "@anio-software/enkore" from the project root.`)
		}

		const {enkore} = await importAPI(enkorePath, "EnkoreNodeAPI", 0)

		const {project} = await enkore(projectRoot, createNodeAPIOptions({
			force: false,
			isCIEnvironment: false,
			npmBinaryPath: undefined,
			onlyInitializeProject: false,
			stdIOLogs: false,
			_forceBuild: false,
			_partialBuild: true,
		}))

		const {messages} = await project.build()

		console.log(messages)
	}

	// we know objects/embeds is up-to-date at this point here
	const embedMap = await generateEmbedFileMap(projectRoot)

	return createEntity("EnkoreJSRuntimeProjectAPIContext", 0, 0, {
		project: createEntity("EnkoreJSRuntimeProject", 0, 0, {
			enkoreConfiguration: JSON.parse(JSON.stringify(projectConfig)),
			packageJSON: JSON.parse(JSON.stringify(projectPackageJSON)),
			projectId: ""
		}),

		_projectEmbedFileMapRemoveMeInBundle: embedMap
	})
}
