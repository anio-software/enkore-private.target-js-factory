import type {API} from "#~src/targetIntegration/API.d.mts"
import type {APIContext} from "#~src/targetIntegration/APIContext.d.mts"
import {createEntity} from "@asint/enkore__spec"
import {getAsset} from "@fourtune/realm-js/v0/assets"
import {targetBoilerplateFileMarkerUUID} from "@asint/enkore__spec/uuid"
import {_generateNPMConfig} from "../_generateNPMConfig.mts"

const impl: API["getBoilerplateFiles"] = async function(
	this: APIContext, session
) {
	function defineFile(path: string, content: string, fullyManagedByEnkore?: boolean, startComment?: string) {
		const header = (() => {
			const scom = startComment && startComment.length ? startComment : "//"
			let tmp = ``

			tmp += `${scom} DO NOT EDIT THIS FILE\n`
			tmp += `${scom} ${targetBoilerplateFileMarkerUUID}\n`

			return tmp
		})()

		return createEntity("EnkoreBoilerplateFile", 0, 0, {
			requestedBy: "target",
			content: `${header}${content}`,
			path,
			fullyManagedByEnkore
		})
	}

	const tsconfigBase = JSON.parse(getAsset("text://tsconfig/base.json") as string)

	if (this.target === "js-node") {
		tsconfigBase.compilerOptions.types.push("node")
	} else if (this.target === "js-web") {
		tsconfigBase.compilerOptions.types.push("web")
	}

	const targetOptions = session.target.getOptions(this.target)

	let npmConfig = ""

	if (targetOptions.npm?.registry) {
		npmConfig = _generateNPMConfig(
			session.project.root,
			targetOptions.npm.registry,
			false,
			false
		)
	}

	return [
		defineFile("tsconfig.json", getAsset("text://tsconfig/tsconfig.json") as string, true),
		defineFile("tsconfig/base.json", JSON.stringify(tsconfigBase, null, 4) + "\n", true),
		defineFile("tsconfig/enkore-config.json", getAsset("text://tsconfig/enkore-config.json") as string, true),
		defineFile("tsconfig/src.json", getAsset("text://tsconfig/src.json") as string, true),
		defineFile("tsconfig/embeds.json", getAsset("text://tsconfig/embeds.json") as string, true),
		defineFile(
			".npmrc",
			npmConfig,
			true,
			"#"
		)
	]
}

export function getBoilerplateFilesFactory(context: APIContext) {
	return impl!.bind(context)
}
