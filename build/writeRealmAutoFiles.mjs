import cleanRealmAutoFiles from "./cleanRealmAutoFiles.mjs"
import fs from "node:fs/promises"
import path from "node:path"
import createRuntimeGlueCode from "../src/runtime/implementation/createRuntimeGlueCode.mjs"
import bundleFile from "./bundleFile.mjs"
import readJSONFile from "../src/runtime/node/util/readJSONFile.mjs"

function autogenerateBanner(realm, version) {
	return `/**
 * This file belongs to realm-${realm}@${version}.
 * Warning: this file was auto-generated. Do not edit this file directly.
 */\n` 
}

async function writeNodeMain(realm, version) {
	let node_main_template = (await fs.readFile("./src/runtime/node/main.template.mjs")).toString()

	node_main_template += createRuntimeGlueCode("runtime")

	node_main_template = node_main_template
		.split(`<<@BASE_REALM>>`).join("./base-realm.mjs")
		.split(`<<@ROLLUP_PLUGIN>>`).join("./plugin.mjs")
		.split(`<<@INITIALIZE_RUNTIME>>`).join("./runtime.mjs")

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "node-main.mjs"),
		autogenerateBanner(realm, version) + node_main_template
	)
}

async function writeNodeMainTypes(realm, version) {
	const node_main_types = (await fs.readFile("./src/runtime/implementation/index.d.ts")).toString()

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "node-main.d.ts"),
		autogenerateBanner(realm, version) + node_main_types
	)
}

async function writeInstall(realm, version) {
	let install_template = await bundleFile("./src/runtime/node/install.template.mjs")

	install_template = install_template
		.split(`<<@BASE_REALM>>`).join("./base-realm.mjs")
		.split(`<<REALM>>`).join(realm)

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "install.mjs"),
		autogenerateBanner(realm, version) + install_template
	)
}

async function writeBaseRealm(realm, version) {
	const base_realm_code = await bundleFile(
		"./node_modules/@fourtune/base-realm/src/index.mjs"
	)

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "base-realm.mjs"),
		autogenerateBanner(realm, version) + base_realm_code
	)
}

async function writePluginMain(realm, version) {
	const plugin_code = await bundleFile(
		"./src/runtime/plugin/main.mjs"
	)

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "plugin.mjs"),
		autogenerateBanner(realm, version) + plugin_code
	)
}

async function writeRuntime(realm, version) {
	const runtime_code = await bundleFile(
		`./src/runtime/implementation/index.mjs`
	)

	await fs.writeFile(
		path.join("src", `realm-${realm}`, "auto", "runtime.mjs"),
		autogenerateBanner(realm, version) + runtime_code
	)
}

export default async function(realm, version) {
	await cleanRealmAutoFiles(realm)

	await writeNodeMain(realm, version)
	await writeNodeMainTypes(realm, version)
	await writeInstall(realm, version)
	await writeBaseRealm(realm, version)
	await writePluginMain(realm, version)
	await writeRuntime(realm, version)

	let package_json_template = await readJSONFile(
		`./src/realm-${realm}/package.template.json`
	)

	if (version !== null) {
		delete package_json_template.private
	}

	package_json_template.version = version

	await fs.writeFile(
		`./src/realm-${realm}/package.json`, JSON.stringify(package_json_template, null, 2) + "\n"
	)
}
