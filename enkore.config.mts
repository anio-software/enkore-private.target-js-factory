import {defineConfig, defineAutogeneratedFile} from "@anio-software/enkore"
import {defineTargetJSConfig} from "@anio-software/enkore.target-js"
import {scandir, type ScandirEntry} from "@aniojs/node-fs"
import path from "node:path"
import {fileURLToPath} from "node:url"

function filterEntry(e: ScandirEntry) {
	if (e.type !== "regularFile") return false
	if (!e.name.includes("Factory")) return false
	if (!e.name.endsWith(".ts")) return false

	return true
}

function mapEntry(e: ScandirEntry) {
	return e.relative_path.slice(0, -("Factory.ts".length))
}

const __dirname = path.dirname(fileURLToPath(import.meta.url))

const apiMethods = (await scandir(
	path.join(__dirname, "project", "src", "targetIntegration", "public"),
	{
		sorted: true,
		filter: filterEntry
	}
)).map(mapEntry)

const projectApiMethods = (await scandir(
	path.join(__dirname, "project", "embeds", "project", "public"),
	{
		sorted: true,
		filter: filterEntry
	}
)).map(mapEntry)

const autogenerateApiMethods = (await scandir(
	path.join(__dirname, "project", "src", "autogenerate", "public"),
	{
		sorted: true,
		filter: filterEntry
	}
)).map(mapEntry)

export const config: unknown = defineConfig({
	target: {
		name: "js",
		options: defineTargetJSConfig({
			environment: ["node"],

			registry: {
				"anioSoftware": {
					url: "https://npm-registry.anio.software",
					authTokenFilePath: "secrets/anio_npm_auth_token",
					clientPrivateKeyFilePath: "secrets/npm_client.pkey",
					clientCertificateFilePath: "secrets/npm_client.cert"
				}
			},

			packageSourceRegistryByScope: {
				"@anio-software": {
					registry: "anioSoftware"
				}
			},

			publish: [{
				registry: "anioSoftware"
			}]
		})
	},

	autogeneratedFiles: [
		defineAutogeneratedFile({
			destinationPath: `project/export/targetIntegration/getTargetIntegrationAPIMethodNames.ts`,
			generator() {
				return `export function getTargetIntegrationAPIMethodNames() {
	return ${JSON.stringify(apiMethods)}
}\n`
			}
		}),
		defineAutogeneratedFile({
			destinationPath: `project/export/project/getProjectAPIMethodNames.ts`,
			generator() {
				return `export function getProjectAPIMethodNames() {
	return ${JSON.stringify(projectApiMethods)}
}\n`
			}
		}),
		defineAutogeneratedFile({
			destinationPath: `project/export/autogenerate/getAutogenerateAPIMethodNames.ts`,
			generator() {
				return `export function getAutogenerateAPIMethodNames() {
	return ${JSON.stringify(autogenerateApiMethods)}
}\n`
			}
		}),
		defineAutogeneratedFile({
			destinationPath: `project/export/getUsedEnkoreSpecPackageVersion.ts`,
			async generator() {
				const {default: specPackageJSON} = await import(
					// @ts-expect-error
					`@anio-software/enkore-private.spec/package.json`, {
						with: {
							type: "json"
						}
					}
				)

				return `export function getUsedEnkoreSpecPackageVersion() {
	return ${JSON.stringify(specPackageJSON.version)}
}\n`
			}
		})
	]
})
