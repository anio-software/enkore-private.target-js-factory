import type {ScandirEntry} from "@aniojs/node-fs"
import type {ProjectEmbedFile} from "./ProjectAPIContext.mts"
import path from "node:path"
import fs from "node:fs/promises"

async function readFileBase64(path: string): Promise<string> {
	const contents = await fs.readFile(path)

	return contents.toString("base64")
}

export async function generateEmbedFileMap(
	entries: ScandirEntry[]
): Promise<Record<string, ProjectEmbedFile>> {
	const map: Map<string, ProjectEmbedFile> = new Map()

	const baseEmbeds = entries.filter(e => {
		return e.name.endsWith(".enkoreRawEmbedFile")
	}).map(e => {
		const newBaseName = e.name.slice(0, -(".enkoreRawEmbedFile".length))

		return {
			origin: path.join(
				path.dirname(e.absolute_path),
				newBaseName
			),
			filePath: path.join(
				path.dirname(e.relative_path),
				newBaseName
			)
		}
	})

	for (const embed of baseEmbeds) {
		map.set(
			`text://${embed.filePath}`, {
				sourceFilePath: embed.filePath,
				data: await readFileBase64(
					`${embed.origin}.enkoreRawEmbedFile`
				)
			}
		)

		if (embed.filePath.endsWith(".mts")) {
			map.set(
				`js-bundle://${embed.filePath}`, {
					sourceFilePath: embed.filePath,
					data: await readFileBase64(
						`${embed.origin}.enkoreJsBundleFile`
					)
				}
			)

			// generated by compilation process
			map.set(
				`dts://${embed.filePath}`, {
					sourceFilePath: embed.filePath,
					data: await readFileBase64(
						`${embed.origin.slice(0, -4)}.d.mts`
					)
				}
			)

			// generated by compilation process
			map.set(
				`js://${embed.filePath}`, {
					sourceFilePath: embed.filePath,
					data: await readFileBase64(
						`${embed.origin.slice(0, -4)}.mjs`
					)
				}
			)
		}
	}

	// so we are able to easily JSON.stringify the map
	return Object.fromEntries(map.entries())
}
